<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_aleen_trace.AlertScheduledDiagnosticsUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>AlertScheduledDiagnosticsUtil</name>
        <script><![CDATA[var AlertScheduledDiagnosticsUtil = Class.create();
AlertScheduledDiagnosticsUtil.prototype = {
	initialize: function(diagnosticRequestGR, actionGr){
			this.diagnostic_request = diagnosticRequestGR.diagnostic_request;
			this.user_table = 'sys_user';
			this.diagnostic_request_table = 'sn_imt_diagnosis_diagnostic_request';
			this.max_retries = gs.getProperty('sn_imt_diagnosis.maximum.retries') || 3;
			this.page_size = gs.getProperty('sn_imt_diagnosis.page.size') || 20;
			this.actionGr = actionGr;
			this.token = null;
			this.requestor_context = 'sys_rest_message';
			
			
			var requestor_id;
			var oauth_profile_id;

			var restMessageGr = new GlideRecordSecure('sys_rest_message');
			restMessageGr.addEncodedQuery('name=AlertTracingAPI');
			restMessageGr.query();
			while(restMessageGr.next()){
				  requestor_id=restMessageGr.sys_id;
				  oauth_profile_id=restMessageGr.oauth2_profile
				  gs.info("Physical access diagnostic events RI:"+requestor_id+" OPI:"+oauth_profile_id);
			}
			
			this.requestor_id = requestor_id;
			this.oauth_profile_id = oauth_profile_id;
		
			this.affected_user = diagnosticRequestGR.getValue('affected_user');
			this.end_date = diagnosticRequestGR.getValue('end_date');
			this.start_date = diagnosticRequestGR.getValue('start_date');
		
			
		
	},
	markAndGetImpactedUsers: function(){
		
		var returnVal = this.markUserAsAffected();
		var result = returnVal.result;
		gs.info("Result:"+result+"RV:"+returnVal);
		if(result=="success")
		{
			returnVal = this.addImpactedUsersFromBadgeReader();
			result = returnVal.result;
			if(result=="success"){
				return returnVal.data;
			}
		}
		
		if(result=="warning"){
			//workaround as the state pending will change the state to success
			this.actionGr.state='';
			return '';
		}
		
		if(result=="failure"){
			var errorMessage = returnVal.errorMessage;
			this.actionGr.log_message=errorMessage;
			this.actionGr.number_of_retries+=1;
			gs.info("Max Ret:"+this.max_retries);
			if(this.max_retries <= parseInt(this.actionGr.getValue('number_of_retries'))){
				this.actionGr.state='failed';
				
			}
			this.actionGr.update();	
			//workaround as the state pending will change the state to success in case it is not set to failed
			this.actionGr.state='';
			
			
		}
			
		
		
	},
	markUserAsAffected: function (){
		
		var returnVal = new x_aleen_trace.AlertReaderUtils().markUserAsAffected({
								tableName: this.diagnostic_request_table,
								diagnosticRequest: this.diagnostic_request,
								affectedUser: this.affected_user,
								startDate: this.start_date,
								endDate: this.end_date,
								userTable: this.user_table,
								requestorId: this.requestor_id,
								oauthProfileId: this.oauth_profile_id,
								requestorContext: this.requestor_context
							});
		var result = returnVal.result;
		
		if(result=="failure")
		{
			var errorMessage = returnVal.errorMessage;
			if(errorMessage!="200"){
				returnVal = new x_aleen_trace.AlertReaderUtils().markUserAsAffected({
								tableName: this.diagnostic_request_table,
								diagnosticRequest: this.diagnostic_request,
								affectedUser: this.affected_user,
								startDate: this.start_date,
								endDate: this.end_date,
								userTable: this.user_table,
								requestorId: this.requestor_id,
								oauthProfileId: this.oauth_profile_id,
								requestorContext: this.requestor_context
					
							});
				
				
			}
			
				
		}
		
		return returnVal;
		
		
		
	},
	addImpactedUsersFromBadgeReader: function (){
		
		var fetchData = true;
		var pageStart = 0;
		var userList = [];
		while(fetchData){
			var returnVal = new x_aleen_trace.AlertReaderUtils().addImpactedUsersFromBadgeReader({
								tableName: this.diagnostic_request_table,
								diagnosticRequest: this.diagnostic_request,
								affectedUser: this.affected_user,
								startDate: this.start_date,
								endDate: this.end_date,
								userTable: this.user_table,
								start: pageStart,
								pageSize: this.page_size,
								requestorId: this.requestor_id,
								oauthProfileId: this.oauth_profile_id,
								requestorContext: this.requestor_context
							});
		
			var result = returnVal.result;
			if(result=="failure")
			{
				var errorMessage = returnVal.errorMessage;
				if(errorMessage!="200"){
					returnVal = new x_aleen_trace.AlertReaderUtils().addImpactedUsersFromBadgeReader({
									tableName: this.diagnostic_request_table,
									diagnosticRequest: this.diagnostic_request,
									affectedUser: this.affected_user,
									startDate: this.start_date,
									endDate: this.end_date,
									userTable: this.user_table,
									start: pageStart,
									pageSize: this.page_size,
									requestorId: this.requestor_id,
									oauthProfileId: this.oauth_profile_id,
									requestorContext: this.requestor_context
								});
					result = returnVal.result;

				}


			}
			if(result=="success"){
				gs.info(" Obtained results:"+returnVal.data.length+": pageStart"+pageStart+": Total Count"+returnVal.totalCount);
				
				for (var i = 0; i < returnVal.data.length; i++){
					var grProbableUser = new GlideRecordSecure(this.user_table);
					grProbableUser.addQuery('email', returnVal.data[i]);
					grProbableUser.addEncodedQuery('sys_id!=' + this.affected_user);
					grProbableUser.query();
					if (grProbableUser.next()) {
						userList.push(grProbableUser.getUniqueValue());
						/*var impactedUser = this._impactedUserFound(grProbableUser.getUniqueValue(), {});
						if (impactedUser==null) {
							this._addBadgeUsers(grProbableUser, "insert");
						}
						else {
							this._addBadgeUsers(impactedUser, "update");
						}*/
					}




				}
				
				pageStart = parseInt(pageStart)+parseInt(this.page_size);
				if(pageStart>=parseInt(returnVal.totalCount)){
					return {result:"success",data:userList.join(',')};
				}
					
			} else {
				return {result:result,errorMessage: returnVal.errorMessage };
			}
			
		}
		
		
		
		
		
		return result;
		
	},
	
	/*_addBadgeUsers: function(grRec, action){
		//gs.info("_addBadgeUsers:"+grRec+":"+action);
		if (action == "insert") {
				var grImpacted = new GlideRecordSecure(this.impacted_user_table);
				grImpacted.initialize();
				grImpacted.diagnostic_request = this.diagnostic_request;
				grImpacted.from_badge_reader = true;
				grImpacted.user = grRec.getUniqueValue();
				grImpacted.insert();
								
		} else if (action == "update") {
			
				grRec.from_badge_reader = true;
				grRec.update();
		}
		
	},
	_impactedUserFound: function (userId, params) {
							var impactedUserGr = new GlideRecordSecure(this.impacted_user_table);
							impactedUserGr.addQuery('user', userId);
							impactedUserGr.addQuery('diagnostic_request', this.diagnostic_request);
							for (var k in params) {
								impactedUserGr.addQuery(k, params[k]);
							}
							impactedUserGr.setLimit(1);
							impactedUserGr.query();
							if(impactedUserGr.next())
								return impactedUserGr;
							else
								return null;
	},*/
     type: 'AlertScheduledDiagnosticsUtil'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-06-24 20:30:32</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>78623ca2dbad1410a3b6176a489619c3</sys_id>
        <sys_mod_count>57</sys_mod_count>
        <sys_name>AlertScheduledDiagnosticsUtil</sys_name>
        <sys_package display_value="AlertEnterpriseTracing" source="x_aleen_trace">fa49e02edb6d1410a3b6176a4896199f</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="AlertEnterpriseTracing">fa49e02edb6d1410a3b6176a4896199f</sys_scope>
        <sys_update_name>sys_script_include_78623ca2dbad1410a3b6176a489619c3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-12-03 08:13:01</sys_updated_on>
    </sys_script_include>
</record_update>
